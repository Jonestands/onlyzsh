#!/usr/bin/env python
from __future__ import absolute_import, print_function, unicode_literals

import errno
import os
import re
import shutil

from argparse import ArgumentParser
from subprocess import CalledProcessError
from subprocess import check_call
from subprocess import check_output


ENV_PATH_RE = re.compile(r'^GO_([A-Z]+)_PATH$')
DEVNULL = file(os.devnull, 'w')


def get_path_filter(real_paths):
    if real_paths:
        def path_filter(p):
            return p

    else:
        sym2path = {}
        for key, value in os.environ.items():
            m = ENV_PATH_RE.search(key)
            if not m:
                continue
            sym2path[m.group(1).lower()] = value

        def path_filter(p):
            return sym2path[p]

    return path_filter


def clean(module, gopath):
    check_call(['go', 'clean', '-i', module],
        env={'GOPATH': gopath})


def install(module):
    check_call(['go', 'install', module])


def dirpath(module, gopath):
    try:
        return check_output(['go', 'list', '-f', '{{.Dir}}', module],
                   stderr=DEVNULL,
                   env={'GOPATH': gopath}).strip()
    except CalledProcessError:
        return None


def main():
    p = ArgumentParser(description='Display modules in GOPATH')
    p.add_argument('module', help='Module name to move')
    p.add_argument('fromgo',   help='Source GOPATH entry')
    p.add_argument('togo',     help='Dest GOPATH entry')

    p.add_argument('-p', '--real-paths', action='store_true', help='Use real paths instead of symbolic')
    args = p.parse_args()

    path_filter     = get_path_filter(args.real_paths)

    args.fromgo   = path_filter(args.fromgo)
    args.togo     = path_filter(args.togo)

    src_full_path = dirpath(args.module, args.fromgo)
    if src_full_path is None:
        p.error('module does not exist in srcpath')

    if dirpath(args.module, args.togo) is not None:
        p.error('module already in dstpath, will not overwrite')

    dst_full_path = src_full_path.replace(args.fromgo, args.togo)

    clean(args.module, args.fromgo)

    try:
        os.makedirs(os.path.dirname(dst_full_path))
    except EnvironmentError as e:
        if e.errno != errno.EEXIST:
            raise

    shutil.move(src_full_path, dst_full_path)

    install(args.module)


if __name__ == '__main__':
    main()

