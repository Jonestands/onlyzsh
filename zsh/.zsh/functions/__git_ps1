# Find current branch:  git symbolic-ref -q HEAD
# Find parent branch:   git name-rev --name-only HEAD
# Find tracking branch: git for-each-ref --format='%(upstream:short)' ref  # (>= git 1.6.3)
#    or echo "$(git config branch.master.remote)/${$(git config branch.master.merge)##refs/heads/}"
#
# The eight base colors are: black, red, green, yellow, blue, magenta, cyan, and white.

__git_ps1()
{
    local conn="%{$fg_bold[black]%} >> %{${reset_color}%}"
    local gitdir="$(git rev-parse --git-dir 2>/dev/null)"

    if [ -z "$gitdir" ]; then
        return 0
    fi

    get_rev()
    {
        local rev
        if ! rev="$(git symbolic-ref -q HEAD 2>/dev/null)"
        then
            if ! rev="$(git describe --exact-match HEAD 2>/dev/null)"
            then
                rev="$(cut -c1-7 "$gitdir/HEAD")..."
            fi
        fi
        echo $rev
    }

    find_tracking()
    {
        echo "$(git for-each-ref --format='%(upstream:short)' "$1" 2>/dev/null)"
    }

    build_path()
    {
        echo -n "%{$fg_bold[green]%}${1##refs/heads/}%{${reset_color}%}"
        local tracking="$(find_tracking $1)"
        if [ -n "$tracking" ]; then
            echo -n "$conn%{$fg_bold[blue]%}$tracking%{${reset_color}%}"
            return
        else
            local parent="refs/heads/$(git name-rev --name-only $1 2>/dev/null)"
            if [ "$parent" != "refs/heads/" -a "$parent" != "$1" ]; then
                echo -n "$conn"
                build_path $parent
            fi
        fi
    }

    local what
    local rev
    if [ -d "$gitdir/rebase-apply" ]
    then
        if test -f "$gitdir/rebase-apply/rebasing"
        then
            what="REBASE"
        elif test -f "$gitdir/rebase-apply/applying"
        then
            what="AM"
        else
            what="AM/REBASE"
        fi
        rev=$(get_rev)
    elif [ -f "$gitdir/rebase-merge/interactive" ]
    then
        what="REBASE-i"
        rev="$(cat "$gitdir/rebase-merge/head-name")"
    elif [ -d "$gitdir/rebase-merge" ]
    then
        what="REBASE-m"
        rev="$(cat "$gitdir/rebase-merge/head-name")"
    elif [ -f "$gitdir/MERGE_HEAD" ]
    then
        what="MERGING"
        rev="$(git symbolic-ref HEAD 2>/dev/null)"
    elif [ -f "$gitdir/CHERRY_PICK_HEAD" ]
    then
        what="CHERRYPICK"
        rev="$(git symbolic-ref HEAD 2>/dev/null)"
    else
        if [ -f "$gitdir/BISECT_LOG" ]
        then
            what="BISECTING"
        fi
        rev=$(get_rev)
    fi

    local top=""
    if [[ "$gitdir" == ".git" ]]; then
        top="${PWD##*/}"
    else
        top="${${gitdir%/.git}##*/}"
    fi

    what+="${what:+|}"
    if [ -n "$1" ]; then
        printf "$1" "$what${rev##refs/heads/}"
    else
        printf " (%s):%s" "$what$(build_path $rev)" "%{$fg_bold[yellow]%}$top%{${reset_color}%}"
    fi
    return 0
}
